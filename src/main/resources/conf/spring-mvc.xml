<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.1.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd">

    <!--     注解的映射器  -->
    <!--      <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/> -->
    <!--     注解的适配器 -->
    <!--      <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/> -->
    <!-- 使用 mvc:annotation-driven可以代替上面注解映射器和注解适配器配置
    mvc:annotation-driven默认加载了很多的参数绑定方法，比如json转换解析器就默认加载了
    实际开发中使用mvc:annotation-driven
    注册了DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter两个bean，配置一些messageconverter。即解决了注解的使用前提配置。
    -->
    <!-- 注解驱动：配置处理器映射器和适配器 -->
    <mvc:annotation-driven/>
    <!--这里让扫描controller，指定controller的包-->
    <context:component-scan base-package="com.myself.study.controller">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 视图解析器
    解析jsp解析，默认使用jstl标签，classpath下得有jstl的包
    -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--使用JSTL标签, 则指定InternalResourceViewResolver的viewClass属性为org.springframework.web.servlet.view.JstlView.-->
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
        <!-- 如果配置的有html视图解析器，则viewClass的值则配置为如下所示 -->
        <!--   <property name="viewClass" value="org.springframework.web.servlet.view.InternalResourceView"/>  -->
        <!-- 前缀 -->
        <property name="prefix" value="/WEB-INF/"/>
        <!-- 后缀 -->
        <property name="suffix" value=".jsp"/>
        <property name="contentType" value="text/html;charset=UTF-8"/>
        <!--配置优先等级，值越小等级越高-->
        <property name="order" value="0"/>
    </bean>
    <!--静态资源映射-->
    <mvc:resources mapping="/css/**" location="/resources/css/"/>
    <mvc:resources mapping="/js/**" location="/resources/js"/>


    <!--转换器-->
    <!--<property name="converters">-->
    <!--<list>-->
    <!--  日期类型转换 -->
    <!--<bean class="com.lnp.controller.converter.CustomDateConverter"/>-->
    <!--</list>-->
    <!--</property>-->
    <!--</bean>-->

    <!-- 全局拦截器 -->
    <!--<mvc:interceptors>-->
    <!--&lt;!&ndash; 顺序执行 &ndash;&gt;-->
    <!--<mvc:interceptor>-->
    <!--<mvc:mapping path="/**"/>-->
    <!--<bean class="com.lnp.interceptor.HandlerInterceptor1"></bean>-->
    <!--</mvc:interceptor>-->

    <!--<mvc:interceptor>-->
    <!--<mvc:mapping path="/**"/>-->
    <!--<bean class="com.lnp.interceptor.HandlerInterceptor2"></bean>-->
    <!--</mvc:interceptor>-->

    <!--<mvc:interceptor>-->
    <!--<mvc:mapping path="/**"/>-->
    <!--<bean class="com.lnp.interceptor.LoginInterceptor"></bean>-->
    <!--</mvc:interceptor>-->

    <!--</mvc:interceptors>-->
</beans>